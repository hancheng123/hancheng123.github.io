{"meta":{"title":"前端博客","subtitle":"个人技术经验","description":"热爱前端的小弟","author":"han cheng","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"怎么用git","slug":"怎么用git","date":"2019-08-24T11:57:24.000Z","updated":"2019-08-24T11:58:46.875Z","comments":true,"path":"2019/08/24/怎么用git/","link":"","permalink":"http://yoursite.com/2019/08/24/怎么用git/","excerpt":"","text":"第一章 git的基础操作安装git:Git下载地址： https://git-scm.com 安装过程跟着程序走就行，不要修改默认地址 安装完成之后先进行本地操作： 先新建一个文件夹，在文件夹里面右键点击git bash here打开命令框。我们在哪个 文件夹打开gitbash就会在当前的根目录中，可以说是很方便了。 在编辑框中输入： 1.git init (在本地创建一个git仓库：仓库具有保存我们历来提交文件版本的功能，也具有备份的功能。） 创建好git仓库是可能会有一个git文件夹，这是git仓库的初始化文件，不用去管。 接下来我们可以在先pwd确保在当前目录。 2.比如创建一个study.html文件 我们可以输入 git status //查看库的状态，是否有文件处于未暂存或未提交状态：保存到git库有三 个步骤：1.文件单方面保存 2.将文件存入暂存区 3.将暂存区的文件提交到仓库 3.git add . 1.指定文件存入暂存区 git add study,html //指定将study文件存入暂存区 2.将全部文件存入暂存区 git add . //将目录下的文件全部加入暂存区 将文件加入暂存区两种方法都可以，如果文件过多就全部加入暂存区 4.git commit -m &apos;注释&apos; 将缓存区的文件提交到仓库，“注释”可写可不写，主要用于提示提交文件的备注，便于 以后的查看，建议养好注释的习惯 如果要修改文件，就重复3,4步 5.git log 查看提交的文件，会显示unknown人员提交的文件 可以写 git config --global user.name &apos;姓名&apos; //回车继续输入 git config --global user.email 邮箱 //回车 这样再提交，提交文件就会显示该文件所提交人的信息，有助于管理。 以上就是在gitbash的本地基本操作，再补充一些更灵活的操作方式。 1.如果想回到之前保存的文件状态 输入 git checkout ID //ID可以通过git log 获取，gitlog会显示每次提交的文件ID， 高亮黄色的就是。 git checkout HEAD^ //回到上次提交的状态 注意回到之前的版本，之后的版本会消失 2.有的文件万年不变，不需要对其进行提交，将其忽略： 在根目录下创建一个.gitignore 文本,编辑文本 / / 这个是需要忽略文件的目录 / / projiect.properties 3.如果文件修改过后还未提交仓库想查看更改的内容 git diff 会将你更改的部分显示出来，方便查看 4.如果回退到之前的版本之后，又后悔了，想回到新保存的文件，俗称“后悔药” git reflog //显示提交的每一次记录，并带有ID git checkout ID //回到想要的版本并且git log 查看在仓库中也存在新版本 5.当文件保存了，但还没加入暂存区，想要撤回修改的代码 git diff //查看修改的代码和目录 &lt;strong&gt; git checkout 文件根目录&lt;/strong&gt; //会将修改的代码全部删除，如果 代码量不是很大，建议手动修改 6.如果文件已经add 加入暂存区的，要撤回修改 git reset HEAD //HEAD表示当前文件，HEAD^表示上个版本文件 撤回之后再继续5.步骤 第二章 git分布式在工作中，项目需要进行多线同时开发，这时就需要git分布式开发了 一个项目需要进行升级维护并且进行功能开发，升级作为master主体，开发作为branch 分支 1.在master主体下打开git bash git checkout -b branch //注意空格 git branch //查看仓库的分支，这市显示master和branch 2.在branchf分支下就能新建文件开发了 如果要删除分支 git branch -d branch //删除后分支的所有文件消失 3.新建的文件 继续基本 加入暂存和提交仓库 git add . git commit -m &apos;新分支&apos; 4.当开发完成的需要和主体合并 必须先回到master git checkout master //回到主体 git merge branch -m //将分支合并到主体，注意分支还是存在的 --也可以主体合并到分支，回到分支 git checkout branch git merge master -m 第三章前面的基础操作都是在本地进行的，接下来是将提交到远程库 远程库托管有俩种：github和gitlab github适用于个人分享技术经验 保密不强 gitlab适用于公司项目托管分布开发，具有私密性 github 需要注册一个账号 地址 https://github.com 需要创建一个仓库 仓库地址 zhanghao/zhanghao.gitub.io.git 1.首次clone项目 在根目录下打开git bash git clone 仓库地址 //在根目录下会创建一个仓库名的文件夹，这个文件夹就是整个 仓库了，里面也有一个.git仓库初始化文件。 克隆完后以后的文件更新只要拉取下来就行了，不用整个仓库clone git pull //拉取文件 2.进行开发，提交至github远程库 首次提交 提交之前也是需要add commit 的基本操作的，只有本地先提交仓库了，才能直接提交 到远程库。 1. git remote add origin https://github.com/zhanghao/zhanghao.github.io.git //可能会提示已经执行了，就直接下一步，就不用管了 2. git push -u origin master（弹出账号密码框） //输入github email 和密码 这样就提交成功了，可以查看github仓库已经有提交的文件了 以后提交直接 git push 在github上还可以进行个人博客的托管，有兴趣的看之后的文章 gitlab 注册gitlab账号 创建新项目点开就有步骤操作 要想在gitlab上clone仓库需要配置ssh秘钥，不然没法创建 1.在根目录右键打开git bash 配置账户，确认权限 git config --global user.name &apos;&apos; git config --global user.email 邮箱 2.生成ssh秘钥 在gitlab点开个人账号的设置，在设置里点SSH秘钥，然后生成公开秘钥 将秘钥写入gitbash ssh-keygen -o -t rsa -b 4096 -c &apos;邮箱&apos; //-c后面的是注释，也是标题 会提示ssh生成的id._rsa文件的地址，找到id._rsa文件用记事本打开，ctrl+a,ctrl +c 全选复制，粘贴到gitlab的SSH秘钥上，标题自动生成也就是&apos;&apos;注释，然后提交就 行了。 3.克隆仓库 git clone 仓库地址 //如果是新建的仓库，在gitlab打开仓库，里面就附有 如果需要覆盖就 y 之后就回车 创建完了。 项目协作： 1.gitlab 首次提交 先add commit git push -u origin master 以后直接 git push 2.首次获取更新 git clone 仓库地址 以后 git pull //拉取更新文件 分支 1.先拉取文件 git pull 2.创建分支 git checkout -b branch 3.add commit 4.git push 会报错系统会提示怎么做 git push --set-upstream origin branch //这是系统提示，可以直接打这个代码， 或直接复制粘贴系统的提示。 创建并提交到远程库后，就能在gitlab库上看到有master 和branch分支了 mater和branch互不影响 5.合并分支 先切换到master git checkout master 合并 git merge branch 这都是在本地操作，要在gitlab上看到合并必须提交远程库 git push //合并后gitlab库上依然存在branch分支 删除远程分支 git push origin :branch //不建议 参考文献 www.stm32hancheng.cn","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-08-24T11:43:10.624Z","updated":"2019-08-24T11:43:10.625Z","comments":true,"path":"2019/08/24/hello-world/","link":"","permalink":"http://yoursite.com/2019/08/24/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}